# -*- coding: utf-8 -*-
"""Task 4 Internship

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qo-9qJVdGMC2_rKDKOkUhx_3BocjeRTm
"""

import os
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import warnings
import imblearn


import numpy as np
from sklearn.model_selection import train_test_split

warnings.filterwarnings("ignore")
sns.set_style("darkgrid")

df = pd.read_csv('//content/RTA Dataset.csv')
column = df.columns
# all the categorical columns
cat_columns = [colname for colname in df.select_dtypes(["object", "category"])]
len(cat_columns)

df.describe(include='object')

df.columns

df.head(10)

def subplot(df, i, column, order=None, palette=None):
    plt.subplot(2, 3, i)
    sns.barplot(data=df[column].value_counts().reset_index(), x=column, y='count', palette=palette, order=order)
    plt.xticks(rotation=45)

sns.set_style('whitegrid')
plt.figure(figsize=(16, 9))
plt.suptitle("Accident Frequency by Category", fontsize=17)

subplot(df, i=1, column = 'Accident_severity')

age_order = ['Under 18', '18-30', '31-50', 'Over 51', 'Unknown']
subplot(df, i=2, column = 'Age_band_of_driver', order= age_order)

day_order = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday']
subplot(df, i=3, column = 'Day_of_week', order=day_order)

education_order= ["Illiterate", "Writing & reading", "Elementary school", "Junior high school","High school","Above high school","Unknown"]
subplot(df, i=4, column = 'Educational_level', order=education_order)

subplot(df, i=5, column = 'Types_of_Junction')
subplot(df, i=6, column = 'Number_of_vehicles_involved')

plt.subplots_adjust(left=0.1, right=0.9, bottom=0.1, top=0.9, wspace=0.4, hspace=0.4)
plt.show()

def fatality_df(column, df=df, sort=False):
    """
    fetches a dataframe having category wise fatality frequency
    """
# finding out the relationship between Accident severity and a column
    df_hello = df.groupby(['Accident_severity', column]).Time.count().reset_index()

    # creating a list of all categories to plot
    rowlist = [row for row in df_hello[column]]
    sumlist = []
    for row in rowlist:
        sumlist.append(df_hello.loc[df_hello[column] == row].Time.sum())

    df_hello['sum'] = sumlist
    df_hello['ratio'] = df_hello['Time']/df_hello['sum']
    df_final = df_hello.loc[df_hello.Accident_severity=='Fatal injury']
    if sort==True:
        df_final = df_final.sort_values(by='ratio')
    return df_final

# example
fatal_collisiontype_df = fatality_df('Type_of_collision', sort=True)
fatal_collisiontype_df

def fatal_palette(df, positions_to_change: list):
    """
    A function to create grey red palettes according to the inputs
    You just need to pass in the dataframe and the index of labels to be highlighted in red
    """
    palette = ['#96898b']*df.shape[0]
    new_values = ['#cc253b']*len(positions_to_change)
    for position, new_value in zip(positions_to_change, new_values):
        palette[position] = new_value
    return sns.color_palette(palette)

# example
fatal_palette(fatality_df('Types_of_Junction'), [0, 1])

def fatal_plot(i, column, red_list, order=None, custom_labels=None, subplot=True, sort=False):
    """
    Plot charts using the fatality_df and fatal_palette.
    Used to plot values in a column against the fatality frequency.
    """
    if subplot==True:
        plt.subplot(2, 3 ,i)
    sns.barplot(data=fatality_df(column, sort=sort), x=column, y='ratio', palette=fatal_palette(fatality_df(column, sort=sort), red_list), order=order)

    # pass in custom x labels
    if custom_labels is not None:
        # Get the current x-axis tick positions
        xtick_positions = plt.xticks()[0]
        # Set the custom labels at the desired positions
        plt.xticks(xtick_positions, custom_labels)

    plt.xticks(rotation=45)
    plt.xlabel(column, fontsize= 14).set_color('#425169')
    plt.ylabel('Fatality ratio', fontsize= 14).set_color('#425169')
    ax = plt.gca()
    ax.spines[['bottom', 'left', 'top', 'right']].set_color('#425169')
    ax.spines[['bottom', 'left', 'top', 'right']].set_linewidth(1)

sns.set_style('darkgrid')
plt.figure(figsize=(15, 8))
plt.suptitle("Fatal injury ratio by Category", fontsize=17).set_color('#2c4369')

fatal_plot(i=1, column='Types_of_Junction', red_list=[1, 4])
fatal_plot(2, 'Number_of_vehicles_involved', [0])
fatal_plot(3, 'Light_conditions', [1])
fatal_plot(4, 'Weather_conditions', [1])
fatal_plot(5, 'Type_of_collision', [1], custom_labels = ['with animals', 'with pedestrians', 'rollover', 'vehicle2vehicle'])
day_order = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday']
fatal_plot(6, 'Day_of_week', [-1, -2], order=day_order)


# sns.despine( right=True, left=False, top=True, bottom=False)
plt.subplots_adjust(left=0.1, right=1, bottom=0.1, top=0.9, wspace=0.4, hspace=0.7)
plt.show()

fatal_plot(1, 'Type_of_vehicle', [-1, -2, -3, -4], subplot=False, sort=True)
plt.xticks(rotation=90)
plt.show()

def crossdf(col):
    """
    Return a pandas crosstab for the given column against the target variable
    """
    crossdf = pd.crosstab(df['Accident_severity'], df[col], normalize='index')
    crossdf = crossdf.reset_index()
    return crossdf

#example
df1 = crossdf('Sex_of_driver')
df1

plt.figure(figsize=(8, 8))
custom_labels = ['Fatal', 'Serious', 'Slight']

plt.subplot(2, 2, 1)
sns.barplot(data = crossdf('Vehicle_driver_relation'),  x = 'Accident_severity', y = 'Employee', palette = 'crest')
plt.xlabel('Driver driving the vehicle', fontsize= 13).set_color('#2d3747')
plt.ylabel('Fatality Distribution')
###
xtick_positions = plt.xticks()[0]
plt.xticks(xtick_positions, custom_labels)
ax = plt.gca()
ax.spines[['bottom', 'left', 'top', 'right']].set_color('#425169')
ax.spines[['bottom', 'left', 'top', 'right']].set_linewidth(2)


plt.subplot(2, 2, 2)
sns.barplot(data = crossdf('Vehicle_driver_relation'),  x = 'Accident_severity', y = 'Owner', palette = 'crest_r')
plt.xlabel('Owner driving the vehicle', fontsize= 13).set_color('#2d3747')
plt.ylabel('')
###
xtick_positions = plt.xticks()[0]
plt.xticks(xtick_positions, custom_labels)
ax = plt.gca()
ax.spines[['bottom', 'left', 'top', 'right']].set_color('#425169')
ax.spines[['bottom', 'left', 'top', 'right']].set_linewidth(2)


plt.subplot(2, 2, 3)
sns.barplot(data = crossdf('Sex_of_driver'),  x = 'Accident_severity', y = 'Female', palette = 'flare')
plt.xlabel('Female driver', fontsize= 13).set_color('#2d3747')
plt.ylabel('Fatality Distribution')
###
xtick_positions = plt.xticks()[0]
plt.xticks(xtick_positions, custom_labels)
ax = plt.gca()
ax.spines[['bottom', 'left', 'top', 'right']].set_color('#425169')
ax.spines[['bottom', 'left', 'top', 'right']].set_linewidth(2)

plt.subplot(2, 2, 4)
sns.barplot(data = crossdf('Sex_of_driver'),  x = 'Accident_severity', y = 'Male', palette = 'flare_r')
plt.xlabel('Male driver', fontsize= 13).set_color('#2d3747')
plt.ylabel('')
###
xtick_positions = plt.xticks()[0]
plt.xticks(xtick_positions, custom_labels)
ax = plt.gca()
ax.spines[['bottom', 'left', 'top', 'right']].set_color('#425169')
ax.spines[['bottom', 'left', 'top', 'right']].set_linewidth(2)

plt.subplots_adjust(left=0.1, right=1, bottom=0.1, top=0.9, wspace=0.2, hspace=0.3)